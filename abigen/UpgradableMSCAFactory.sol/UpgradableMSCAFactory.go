// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package UpgradableMSCAFactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// UpgradableMSCAFactoryMetaData contains all meta data concerning the UpgradableMSCAFactory contract.
var UpgradableMSCAFactoryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_entryPointAddr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_pluginManagerAddr\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"receive\",\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"acceptOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"accountImplementation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractUpgradableMSCA\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addStake\",\"inputs\":[{\"name\":\"_unstakeDelaySec\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"createAccount\",\"inputs\":[{\"name\":\"_sender\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_initializingData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"contractUpgradableMSCA\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"entryPoint\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIEntryPoint\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getAddress\",\"inputs\":[{\"name\":\"_sender\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_initializingData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"mixedSalt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isPluginAllowed\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pendingOwner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPlugins\",\"inputs\":[{\"name\":\"_plugins\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"_permissions\",\"type\":\"bool[]\",\"internalType\":\"bool[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unlockStake\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawStake\",\"inputs\":[{\"name\":\"_withdrawAddress\",\"type\":\"address\",\"internalType\":\"addresspayable\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"AccountCreated\",\"inputs\":[{\"name\":\"proxy\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"FactoryDeployed\",\"inputs\":[{\"name\":\"factory\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"accountImplementation\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"entryPoint\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferStarted\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"Create2FailedDeployment\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidInitializationInput\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidLength\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"PluginIsNotAllowed\",\"inputs\":[{\"name\":\"plugin\",\"type\":\"address\",\"internalType\":\"address\"}]}]",
	Bin: "0x60c0346101a957601f6200526338819003918201601f19168301926001600160401b03929091838511838610176101ae5781606092849260409788528339810103126101a95761004e816101c4565b6100658461005e602085016101c4565b93016101c4565b6001600160a01b03918216939092908415610191578260018060a01b031992836001541660015560009680885495861617885582895195167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08980a316938460a052613ee1808401928484109084111761017d5791848492899462001382853987835216602082015203019084f092831561017257508260805283519216825260208201527fcb6d2c666b098c711fa0f2ce20b6863cc2b92e5378301100a4b2731b50516d5f823092a2516111a99081620001d982396080518181816105da01528181610ba20152610df1015260a05181818161029f01528181610338015281816103ad01526106360152f35b8451903d90823e3d90fd5b634e487b7160e01b87526041600452602487fd5b8551631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101a95756fe60406080815260048036101562000021575b505036156200001f57600080fd5b005b600091823560e01c9081630396cb60146200060957816311464fbe14620005c3578163715018a6146200055957816379ba509714620004c857816381d0dff114620004965781638da5cb5b146200046c578163a50833cd1462000429578163acf85fc114620003dc578163b0d691fe146200039657838263bb9fe6bf1462000317578263c23a5cea146200026657508163e034b0901462000175578163e30c3978146200014a575063f2fde38b03620000115734620001465760203660031901126200014657356001600160a01b038181169182900362000142576200010662000c69565b600180546001600160a01b031916831790558254167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e227008380a380f35b8280fd5b5080fd5b839034620001465781600319360112620001465760015490516001600160a01b039091168152602090f35b905034620001425780600319360112620001425767ffffffffffffffff9082358281116200026257620001ac90369085016200078a565b90926024359081116200025e57620001c890369086016200078a565b9094620001d462000c69565b818303620002505750855b828110620001eb578680f35b620001f881838862000c42565b35908115158092036200024c576200021281858862000c42565b356001600160a01b03811692908390036200024857600192895260026020528589209060ff8019835416911617905501620001df565b8880fd5b8780fd5b835163251f56a160e21b8152fd5b8580fd5b8480fd5b9291503462000313576020366003190112620003135781356001600160a01b03818116939184900362000262576200029d62000c69565b7f00000000000000000000000000000000000000000000000000000000000000001692833b15620002625760248592838551968794859363611d2e7560e11b85528401525af19081156200030a5750620002f45750f35b620002ff90620006a1565b620003075780f35b80fd5b513d84823e3d90fd5b5050fd5b9291503462000313578260031936011262000313576200033662000c69565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691823b156200039157815163bb9fe6bf60e01b81529284918491829084905af19081156200030a5750620002f45750f35b505050fd5b8390346200014657816003193601126200014657517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b8334620003075750620004136200040a620003f7366200070c565b60208082959395518301019101620007fc565b93909262000cab565b82516001600160a01b0390921682526020820152f35b91905034620001425760203660031901126200014257356001600160a01b038116908190036200014257818360ff92602095526002855220541690519015158152f35b8390346200014657816003193601126200014657905490516001600160a01b039091168152602090f35b8390346200014657602090620004b7620004b0366200070c565b9162000b04565b90516001600160a01b039091168152f35b9050346200014257826003193601126200014257600154916001600160a01b03913383851603620005425750506bffffffffffffffffffffffff60a01b8092166001556000549133908316176000553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60249250519063118cdaa760e01b82523390820152fd5b833462000307578060031936011262000307576200057662000c69565b600180546001600160a01b0319908116909155600080549182168155906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8390346200014657816003193601126200014657517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90506020366003190112620001425782823563ffffffff811680910362000146576200063462000c69565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031693843b15620001425760249084519586938492621cb65b60e51b845283015234905af19081156200030a575062000693575080f35b6200069e90620006a1565b80f35b67ffffffffffffffff8111620006b657604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117620006b657604052565b67ffffffffffffffff8111620006b657601f01601f191660200190565b60606003198201126200078557600435916024359160443567ffffffffffffffff811162000785578160238201121562000785578060040135906200075182620006ef565b92620007616040519485620006cc565b82845260248383010111620007855781600092602460209301838601378301015290565b600080fd5b9181601f84011215620007855782359167ffffffffffffffff831162000785576020808501948460051b0101116200078557565b67ffffffffffffffff8111620006b65760051b60200190565b60005b838110620007eb5750506000910152565b8181015183820152602001620007da565b90916060828403126200078557815167ffffffffffffffff908181116200078557830184601f8201121562000785578051946020916200083c87620007be565b906040976200084e89519384620006cc565b808352848084019160051b8301019184831162000785578501905b828210620009b55750505095828601518481116200078557860182601f8201121562000785578051906200089d82620007be565b91620008ac84519384620006cc565b808352858084019160051b83010191858311620007855786809101915b838310620009a457505050509581810151908582116200078557019180601f840112156200078557825190620008ff82620007be565b956200090e84519788620006cc565b828752858088019360051b860101948286116200078557868101935b8685106200093d57505050505050505090565b8451838111620007855782019084603f83011215620007855788820151906200096682620006ef565b6200097489519182620006cc565b828152868984860101116200078557620009988b949385948b8685019101620007d7565b8152019401936200092a565b8251815291810191879101620008c9565b81516001600160a01b03811681036200078557815290850190850162000869565b90602091620009f181518092818552858086019101620007d7565b601f01601f1916010190565b60608101606082528251809152608082019060208094019060005b8582821062000abf57505050508181038383015282808551928381520194019060005b81811062000aaa5750505060408184039101528251908183528083019281808460051b8301019501936000915b84831062000a795750505050505090565b909192939495848062000a99600193601f198682030187528a51620009d6565b980193019301919493929062000a68565b82518652948401949184019160010162000a3b565b83516001600160a01b03168552938401939092019160010162000a18565b6001600160a01b03909116815260406020820181905262000b0192910190620009d6565b90565b929162000b1b9060208082518301019101620007fc565b9162000b2d838383878a969a62000cab565b9096873b62000c2e5762000b7460018060a01b039362000b6560409788519485936370c321eb60e01b602086015260248501620009fd565b03601f198101835282620006cc565b8451906102d38083019183831067ffffffffffffffff841117620006b657839262000bc99262000ea18539867f0000000000000000000000000000000000000000000000000000000000000000169062000add565b03906000f5801562000c2357811695169283860362000c1257825191825260208201527f934abbffb6906db60a85b076f1e41da9667dfa53c7724f4fe2333298d7b1db8c9190a2565b8251633a0ba96160e11b8152600490fd5b83513d6000823e3d90fd5b50506001600160a01b039095169450505050565b919081101562000c535760051b0190565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b0316330362000c7e57565b60405163118cdaa760e01b8152336004820152602490fd5b805182101562000c535760209160051b010190565b91939492908451801590811562000e93575b811562000e86575b5062000e745760005b855181101562000d36576001600160a01b038062000ced838962000c96565b5116600052600260205260409060ff8260002054161562000d1357505060010162000cce565b62000d216024938962000c96565b519151625e27f360e81b815291166004820152fd5b509091929394604091825160209182820196875284820152838152606081019481861067ffffffffffffffff871117620006b65762000e5b838762000e4e9362000dc39c60559b600b9b8b52875190209d8e9960806102d39962000d9d888c0188620006cc565b8a8752019862000ea18a398b516370c321eb60e01b8782015293849360248501620009fd565b0362000dd8601f1991828101845283620006cc565b62000e258a51918262000e188782019560018060a01b037f0000000000000000000000000000000000000000000000000000000000000000168762000add565b03908101835282620006cc565b895195869362000e3e868601998a9251928391620007d7565b84019151809386840190620007d7565b01038084520182620006cc565b5190208351938401528201523081520160ff8153209190565b604051635297bbdb60e11b8152600490fd5b9050865114153862000cc5565b8351811415915062000cbd56fe60806040526102d38038038061001481610194565b92833981019060408183031261018f5780516001600160a01b03811680820361018f5760208381015190936001600160401b03821161018f570184601f8201121561018f5780519061006d610068836101cf565b610194565b9582875285838301011161018f57849060005b83811061017b57505060009186010152813b15610163577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b03191682179055604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28351156101455750600080848461012c96519101845af4903d1561013c573d61011c610068826101cf565b908152600081943d92013e6101ea565b505b6040516085908161024e8239f35b606092506101ea565b9250505034610154575061012e565b63b398979f60e01b8152600490fd5b60249060405190634c9c8ce360e01b82526004820152fd5b818101830151888201840152869201610080565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176101b957604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116101b957601f01601f191660200190565b9061021157508051156101ff57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610244575b610222575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561021a56fe60806040527f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e15604b573d90f35b3d90fdfea2646970667358221220d4df0841384884154f220c2629955c803d304e6525a53c5a1e6229a169328e9d64736f6c63430008180033a264697066735822122084a880c017a0226c0cda895f94fd0a9d4253757f5d798ebd8c4a0d58e11e8db064736f6c6343000818003360e0346200010157601f62003ee138819003918201601f19168301916001600160401b0383118484101762000106578084926040948552833981010312620001015780516001600160a01b039182821682036200010157602001519182168203620001015760805260a052620000746200011c565b3060c052620000826200011c565b604051613d4490816200019d823960805181818161024901528181610c2801528181610c6601528181610cf80152818161197301528181611ab501528181611f6501528181612178015261240c015260a0518181816104e8015281816118f701528181611f290152612131015260c051818181610fb801526126b90152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b7fc6a0cc20c824c4eecc4b0fbb7fb297d07492a7bd12c83d4fa4d27b4249f9bfd0805460ff8160081c166200018a5760ff808216036200015a575050565b60ff191660ff1790557f80bd505c666aa4feeb94643343d3e5acfd6d0b8c43c826331f5d543cbfa7e575600080a1565b604051630a87f6e360e31b8152600490fdfe60806040526004361015610026575b36156100245761001c61216e565b602081519101f35b005b60003560e01c806301ffc9a7146101b157806319822f7c146101ac5780632e0e0bae146101a757806334fcd5be146101a257806338997b111461019d5780633a0cac561461019857806344ab613f1461015c5780634a58db19146101935780634d44560d1461018e5780634f1ef2861461018957806352d1902d1461018457806354fd4d501461017f578063642f9dd41461017a57806370c321eb146101755780638d1121841461017057806394ed11e71461016b578063a6c3e6b914610166578063ad3cb1cc14610161578063b0d691fe1461015c578063b61d27f614610157578063c1a221f314610152578063c399ec881461014d578063ceaf130914610148578063d087d288146101435763f85730f40361000e57611b21565b611a82565b611a2a565b611947565b61182e565b6117c1565b610c12565b61177b565b61171d565b6115ba565b6114d4565b61140f565b6110e1565b611010565b610fa5565b610ea1565b610ccf565b610c57565b610a45565b6107a0565b6105c3565b6104d2565b610200565b6101de565b60209060031901126101d9576004356001600160e01b0319811681036101d95790565b600080fd5b346101d95760206101f66101f1366101b6565b611c44565b6040519015158152f35b346101d9576003196060368201126101d95760048035916001600160401b0383116101d9576101208383019184360301126101d9576001600160a01b03926044359290602435907f0000000000000000000000000000000000000000000000000000000000000000861633036104b6576064018261027e828661223c565b9050106104a55761029b6102956102a1928661223c565b9061226e565b9061227c565b6001600160e01b03198116156104a5576102ba90611c0c565b60018101936102c885612084565b916001600160581b03196102db846130c3565b168015908115610497575b8115610489575b50610454579061033161032661031a61031a61030c8886602098613109565b96516001600160a01b031690565b6001600160a01b031690565b965460a01c60ff1690565b61034e604051958693849363c4db8dd960e01b85528985016122fa565b0381600080985af190811561044f5761036e92859261041e575b506132f7565b60408101519094166001600160a01b03168015159081610412575b5061040357506103cc6103e59360018060a01b0360408201511665ffffffffffff60a01b602083015160a01b16179065ffffffffffff60d01b905160d01b161790565b91806103e9575b50506040519081529081906020820190565b0390f35b8180809233600019f1506103fb611ca3565b5038806103d3565b6040516310b1cc1760e31b8152fd5b60019150141538610389565b61044191925060203d602011610448575b6104398183610e06565b8101906120ac565b9038610368565b503d61042f565b611cd3565b84610463602085015160ff1690565b6040516314d291c760e21b815260ff9091169181019182529081906020010390fd5b0390fd5b600160591b149050386102ed565b600160581b811491506102e6565b60405163aedb4d1360e01b81528390fd5b604051635c427cd960e01b81528390fd5b60009103126101d957565b346101d95760003660031901126101d9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60005b83811061052a5750506000910152565b818101518382015260200161051a565b9060209161055381518092818552858086019101610517565b601f01601f1916010190565b6020808201906020835283518092526040830192602060408460051b8301019501936000915b8483106105955750505050505090565b90919293949584806105b3600193603f198682030187528a5161053a565b9801930193019194939290610585565b6020806003193601126101d95760048035906001600160401b03928383116101d957366023840112156101d95782600401359384116101d9576024830192602436918660051b0101116101d9576106186123e4565b92610622856125b0565b9460005b818110610646576103e58761063a886124a9565b6040519182918261055f565b61066161065c6106578385876125fa565b61261c565b613486565b6106cb57806106af61067961065760019486886125fa565b866106858487896125fa565b01356106a96106a261069886898b6125fa565b604081019061223c565b3691610e4f565b91613091565b6106b9828a611e87565b526106c48189611e87565b5001610626565b906106da9350610657926125fa565b604051632738731760e21b81526001600160a01b039091169181019182529081906020010390fd5b6001600160a01b038116036101d957565b359061071e82610702565b565b9181601f840112156101d9578235916001600160401b0383116101d957602083818601950101116101d957565b60606003198201126101d95760043561076581610702565b9160243591604435906001600160401b0382116101d95761078891600401610720565b9091565b90602061079d92818152019061053a565b90565b6107a93661074d565b91906001600160a01b038416301480156109f1575b6109df57811515806109d6575b8061098c575b610974573360009081527fc6a0cc20c824c4eecc4b0fbb7fb297d07492a7bd12c83d4fa4d27b4249f9bfcd602090815260408083206001600160a01b03881684529091529020610821848361227c565b9081815460ff81166000146109355760081c60ff16918215610902575b505080156108fa575b156108d057506338997b1160e01b6000527fc6a0cc20c824c4eecc4b0fbb7fb297d07492a7bd12c83d4fa4d27b4249f9bfcf6020526103e5936108c4926108be926106a9906108b6367f07eda5375f0c0049cbc1df9c13c9a2a93f42195e5d3aa188c59b49f74f3e5e51612e9b565b963691610e4f565b916124a9565b6040519182918261078c565b60405163415b1b4960e01b81523360048201526001600160e01b0319919091166024820152604490fd5b508315610847565b61092e925090600161092792019063ffffffff60e01b16600052602052604060002090565b5460ff1690565b813861083e565b50503360009081527fc6a0cc20c824c4eecc4b0fbb7fb297d07492a7bd12c83d4fa4d27b4249f9bfcb6020526040902061096f9150610927565b610847565b60405163171b202760e11b8152336004820152602490fd5b503360009081527fc6a0cc20c824c4eecc4b0fbb7fb297d07492a7bd12c83d4fa4d27b4249f9bfcb602052604090206109d1906109cd905460081c60ff1690565b1590565b6107d1565b503482116107cb565b6040516305d2fdc960e41b8152600490fd5b506109fb84613486565b6107be565b602090602060408183019282815285518094520193019160005b828110610a28575050505090565b83516001600160a01b031685529381019392810192600101610a1a565b346101d957600080600319360112610c0f577fc6a0cc20c824c4eecc4b0fbb7fb297d07492a7bd12c83d4fa4d27b4249f9bfca5490610a8382612653565b918180805b838310610a9e575b604051806103e58882610a00565b610aa6612626565b926001600160a01b039283811615610bb8575b86905b600a821080610bad575b15610b4457610b38610b2b82610af2610b3e94610ae3878c611e87565b6001600160a01b039091169052565b6001600160a01b031660009081527fc6a0cc20c824c4eecc4b0fbb7fb297d07492a7bd12c83d4fa4d27b4249f9bfc86020526040902090565b546001600160a01b031690565b9161269b565b90610abc565b9295919396908552805b8551811015610b905780610b8a610b77610b6a6001948a611e87565b516001600160a01b031690565b610ae3610b838b61269b565b9a8d611e87565b01610b4e565b509590949350811615610ba857600190910191610a88565b610a90565b508481161515610ac6565b50600080527fc6a0cc20c824c4eecc4b0fbb7fb297d07492a7bd12c83d4fa4d27b4249f9bfc8602052610c0a7fd594a02d3fda915a830c228e795b44eb4af5dfc9cc085b4c42f40bccd958a910610b2b565b610ab9565b80fd5b346101d95760003660031901126101d9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600080600319360112610c0f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681813b15610c0f5760405163b760faf960e01b8152306004820152918290602490829034905af1801561044f57610cc3575080f35b610ccc90610d9c565b80f35b346101d95760006040366003190112610c0f57600435610cee81610702565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691903383141580610d7c575b610d6a578391833b15610d665760449083604051958694859363040b850f60e31b855216600484015260243560248401525af1801561044f57610cc3575080f35b8280fd5b604051635c427cd960e01b8152600490fd5b5030331415610d25565b634e487b7160e01b600052604160045260246000fd5b6001600160401b038111610daf57604052565b610d86565b606081019081106001600160401b03821117610daf57604052565b604081019081106001600160401b03821117610daf57604052565b61016081019081106001600160401b03821117610daf57604052565b90601f801991011681019081106001600160401b03821117610daf57604052565b6040519061071e82610db4565b6001600160401b038111610daf57601f01601f191660200190565b929192610e5b82610e34565b91610e696040519384610e06565b8294818452818301116101d9578281602093846000960137010152565b9080601f830112156101d95781602061079d93359101610e4f565b60403660031901126101d957600435610eb981610702565b6024356001600160401b0381116101d957610ed8903690600401610e86565b90610ee16126af565b610ee96123e4565b610ef16126af565b6040516352d1902d60e01b81526020816004816001600160a01b0387165afa60009181610f84575b50610f3f57604051634c9c8ce360e01b81526001600160a01b0384166004820152602490fd5b600080516020613cef8339815191528193929303610f6a575061002492610f6591613a61565b6124a9565b604051632a87526960e21b81526004810191909152602490fd5b610f9e91925060203d602011610448576104398183610e06565b9038610f19565b346101d95760003660031901126101d9577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610ffe576020604051600080516020613cef8339815191528152f35b60405163703e46dd60e11b8152600490fd5b346101d95760003660031901126101d9576103e560405161103081610dcf565b60058152640312e302e360dc1b602082015260405191829160208352602083019061053a565b602080820190602083528351809252602060408094019401926000905b83821061108257505050505090565b90919293948360806001926110d4838a516110b384825160ff6020809260018060a01b038151168552015116910152565b015180516001600160a01b031683880190815260209182015160ff16910152565b0196019493920190611073565b346101d9576110f76110f2366101b6565b611c0c565b600d8101601082015490601383019160168401549361111a601182015486612709565b94611126600096612716565b9461112f613561565b9087915b838310611294575b50505050611147613561565b601260009201905b838310611168575b868652604051806103e58882611056565b6111799085929597969394976135ae565b90946000965b865188101561125c576111c06111bb6111a161119b8b8b611e87565b516130c3565b84906001600160581b031916600052602052604060002090565b61299e565b80519094901561122f576000915b855183101561121b576112136001916111e78c8c611e87565b516111f2828b611e87565b51526111fe8589611e87565b51602061120b838c611e87565b51015261269b565b9201916111ce565b9992945097600191505b019692909761117f565b97600191999294506112418189611e87565b5161125561124e8c61269b565b9b88611e87565b5152611225565b9794939650945061127c61126f826130c3565b6001600160581b03191690565b1561128f5760019092019193909361114f565b611157565b6112a6908294969395929897986135ae565b93909560005b8a88518210156112e4579060019160206112db6112d46112cc858e611e87565b51939f61269b565b9e8d611e87565b510152016112ac565b5050939091955096939195966112fc61126f826130c3565b156113105760019092019195949395611133565b9594939561113b565b6001600160401b038111610daf5760051b60200190565b9080601f830112156101d957602090823561134a81611319565b936113586040519586610e06565b81855260208086019260051b8201019283116101d957602001905b828210611381575050505090565b81358152908301908301611373565b81601f820112156101d9578035916020916113aa84611319565b936113b86040519586610e06565b808552838086019160051b830101928084116101d957848301915b8483106113e35750505050505090565b82356001600160401b0381116101d957869161140484848094890101610e86565b8152019201916113d3565b346101d95760603660031901126101d9576001600160401b036004358181116101d957366023820112156101d957806004013561144b81611319565b916114596040519384610e06565b8183526020916024602085019160051b830101913683116101d957602401905b8282106114bb5785856024358281116101d95761149a903690600401611330565b6044359283116101d9576114b5610024933690600401611390565b91611cdf565b83809183356114c981610702565b815201910190611479565b346101d95760a06114e4366101b6565b6115a0604051916114f483610db4565b6000835261158160208401611507611de5565b815261154d6007611540604088019561151e611de5565b8752611529816127aa565b156115a2573089525b611546600161154083611c0c565b01612084565b8552611c0c565b83526040805195516000196001891b01168652905180516001600160a01b0316602080880191909152015160ff1690850152565b5180516001600160a01b031660608401526020015160ff166080830152565bf35b6001808b1b036115b182611c0c565b54168952611532565b60203660031901126101d957600480356001600160401b0381116101d9576115e59036908301610720565b919081831061170d576115fb61029b848361226e565b6001600160e01b03198116156104a5573360009081527fc6a0cc20c824c4eecc4b0fbb7fb297d07492a7bd12c83d4fa4d27b4249f9bfcc602090815260408083206001600160e01b031985168452909152902061165b906109cd90610927565b6116df5761166881611c0c565b80549093906001600160a01b0316156116b7576103e5846108c46108be886116b1886116a961169b8483600d8a01612f79565b96546001600160a01b031690565b923691610e4f565b9061305a565b604051632d71321b60e11b81526001600160e01b031990921690820190815281906020010390fd5b6040805163415b1b4960e01b8152338186019081526001600160e01b03199093166020840152918291010390fd5b5060405163aedb4d1360e01b8152fd5b346101d95760003660031901126101d9576103e560405161173d81610dcf565b601981527f436972636c6520496e7465726e65742046696e616e6369616c00000000000000602082015260405191829160208352602083019061053a565b346101d95760003660031901126101d9576103e560405161179b81610dcf565b60058152640352e302e360dc1b602082015260405191829160208352602083019061053a565b6117ca3661074d565b91906117d46123e4565b926117de85613486565b61180d57936117f9926106a96108be936103e5973691610e4f565b60405191829160208352602083019061053a565b604051632738731760e21b81526001600160a01b0386166004820152602490fd5b346101d95760603660031901126101d95760043561184b81610702565b6001600160401b03906024358281116101d95761186c903690600401610e86565b916044359081116101d9576100249261191c6118e76118916001943690600401610e86565b946118f561189d6123e4565b9660405193849163b58bb5cb60e01b60208401526118d5898060a01b038096169889602486015260606044860152608485019061053a565b8381036023190160648501529061053a565b03601f198101845283610e06565b7f000000000000000000000000000000000000000000000000000000000000000016612783565b507feb7551bad8fd10038dee62a958c2b6f45624499dc800ff8936bb0a4904bdd2fe600080a36124a9565b346101d95760003660031901126101d9576040516370a0823160e01b81523060048201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa801561044f576020916000916119b7575b50604051908152f35b6119ce9150823d8411610448576104398183610e06565b386119ae565b90815180825260208080930193019160005b8281106119f4575050505090565b9091929382604082611a1e600194895160ff6020809260018060a01b038151168552015116910152565b019501939291016119e6565b346101d957611a74611a3b366101b6565b6103e5611a606008611a54611a5a6002611a5487611c0c565b0161299e565b94611c0c565b6040519384936040855260408501906119d4565b9083820360208501526119d4565b346101d95760003660031901126101d957604051631aab3f0d60e11b8152306004820152600060248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa801561044f576103e591600091611b02575b506040519081529081906020820190565b611b1b915060203d602011610448576104398183610e06565b38611af1565b346101d95760803660031901126101d957600435611b3e81610702565b6001600160401b036044358181116101d957611b5e903690600401610e86565b6064359182116101d957366023830112156101d957816004013592611b8284611319565b92604094611b936040519586610e06565b8085526020906024602087019160061b840101923684116101d957602401905b838210611bc8576100248787602435886120bb565b87823603126101d957875190611bdd82610dcf565b8235611be881610702565b8252838301359060ff821682036101d957828592838c950152815201910190611bb3565b63ffffffff60e01b166000527fc6a0cc20c824c4eecc4b0fbb7fb297d07492a7bd12c83d4fa4d27b4249f9bfcf602052604060002090565b6001600160e01b0319908116908114611c9d576301ffc9a760e01b8114611c97576000527fc6a0cc20c824c4eecc4b0fbb7fb297d07492a7bd12c83d4fa4d27b4249f9bfce602052604060002054151590565b50600190565b50600090565b3d15611cce573d90611cb482610e34565b91611cc26040519384610e06565b82523d6000602084013e565b606090565b6040513d6000823e3d90fd5b90917fc6a0cc20c824c4eecc4b0fbb7fb297d07492a7bd12c83d4fa4d27b4249f9bfd09283549260ff8460081c16159460ff85168680611ddb575b15908115611dbe575b50611dac5760ff1985166001178155611d439486611d9a575b5050611efd565b611d4957565b7fc6a0cc20c824c4eecc4b0fbb7fb297d07492a7bd12c83d4fa4d27b4249f9bfd0805461ff00191690557f80bd505c666aa4feeb94643343d3e5acfd6d0b8c43c826331f5d543cbfa7e575600080a1565b61ffff19166101011790553880611d3c565b60405163281f483d60e11b8152600490fd5b303b15915081611dd0575b5038611d23565b600191501438611dc9565b5060018110611d1a565b60405190611df282610dcf565b60006020838281520152565b604051602081018181106001600160401b03821117610daf576040526000815290565b90611e2b82611319565b611e386040519182610e06565b8281528092611e49601f1991611319565b019060005b828110611e5a57505050565b602090611e65611de5565b82828501015201611e4e565b634e487b7160e01b600052603260045260246000fd5b8051821015611e9b5760209160051b010190565b611e71565b93611ed1608094611edf939498979860018060a01b038096168852602088015260a0604088015260a087019061053a565b9085820360608701526119d4565b9416910152565b60409061079d9392815281602082015201906119d4565b9291909280519380518514801590612079575b61206757611f1f949194611dfe565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811696909491929160005b858110611fad575050505050509091507f000000000000000000000000000000000000000000000000000000000000000016307f9ad63ccc518b8ef686178afc6749063718e08d960071488b02568d9f4258f2ac600080a3565b80611fbd610b6a60019386611e87565b612012611fca8388611e87565b5161200c611fd88588611e87565b5191611ffe6040958c875195869463c877ea6360e01b6020870152309360248701611ea0565b03601f198101835282610e06565b8c612783565b507fbd807faaec7a357be5390445b7efef4a0ca92fa66300ee4827dde3d9387ffb5189612042610b6a8589611e87565b61205e8a612050878c611e87565b519551938493169583611ee6565b0390a201611f53565b604051635297bbdb60e11b8152600490fd5b508251851415611f10565b9060405161209181610dcf565b91546001600160a01b038116835260a01c60ff166020830152565b908160209103126101d9575190565b6121147fbd807faaec7a357be5390445b7efef4a0ca92fa66300ee4827dde3d9387ffb519161216661071e966121226120f26123e4565b9760405195869163c877ea6360e01b60208401528430918b8960248701611ea0565b03601f198101865285610e06565b6001600160a01b0393612157907f00000000000000000000000000000000000000000000000000000000000000008616612783565b50604051938493169583611ee6565b0390a26124a9565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081163303612222575b6000356001600160e01b031916906121b782611c0c565b9081541691821561220a57506108be6121d761079d92600d369101612e9b565b926121e136610e34565b906121ef6040519283610e06565b36825236600060208401376000602036840101523490613091565b60249060405190632d71321b60e11b82526004820152fd5b6122376000356001600160e01b031916612b12565b6121a0565b903590601e19813603018212156101d957018035906001600160401b0382116101d9576020019181360383136101d957565b906004116101d95790600490565b6001600160e01b0319903581811693926004811061229957505050565b60040360031b82901b16169150565b9035601e19823603018112156101d95701602081359101916001600160401b0382116101d95781360383136101d957565b908060209392818452848401376000828201840152601f01601f1916010190565b9392916123606123df9160ff604094168752606060208801526123306060880161232383610713565b6001600160a01b03169052565b602081013560808801526123cf612349858301836122a8565b9390610120948560a08c01526101808b01916122d9565b916123c661238861237460608401846122a8565b605f198d8803810160c08f015296916122d9565b608083013560e08c01526101009560a0840135878d015260c0840135908c01526123b560e08401846122a8565b8c830387016101408e0152906122d9565b938101906122a8565b91888403016101608901526122d9565b930152565b6000356001600160e01b0319166123fa816127aa565b156124505761079d90600d9061243f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361244757611c0c565b013690612e9b565b6110f281612b12565b602490604051906350f2762560e11b82526004820152fd5b60409060ff61079d9493168152816020820152019061053a565b60ff61079d949360609360018060a01b03168352166020820152816040820152019061053a565b80516000905b8082106124bb57505050565b909192602090816124cc8587611e87565b51015180519093906124e89061031a906001600160a01b031681565b928401956124f7875160ff1690565b956125028183611e87565b515196853b156101d9576040958651808093631128186d60e01b825260049b8c83019161252e92612468565b03815a6000948591f19081612597575b50612584578787610485888861256e612566612558611ca3565b93516001600160a01b031690565b955160ff1690565b9051638342a64960e01b81529485948501612482565b92965093509350600191500190916124af565b806125a46125aa92610d9c565b806104c7565b3861253e565b906125ba82611319565b6125c76040519182610e06565b82815280926125d8601f1991611319565b019060005b8281106125e957505050565b8060606020809385010152016125dd565b9190811015611e9b5760051b81013590605e19813603018212156101d9570190565b3561079d81610702565b6040519061016082018281106001600160401b03821117610daf57604052600a8252610140366020840137565b9061265d82611319565b61266a6040519182610e06565b828152809261267b601f1991611319565b0190602036910137565b634e487b7160e01b600052601160045260246000fd5b60001981146126aa5760010190565b612685565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081163081149182156126ed575b5050610ffe57565b600080516020613cef83398151915254161415905038806126e5565b919082018092116126aa57565b9061272082611319565b6040906127306040519182610e06565b8381528093612741601f1991611319565b019160005b8381106127535750505050565b602090825161276181610dcf565b612769611de5565b815282612774611de5565b81830152828601015201612746565b6000918291602082519201905af4612799611ca3565b90156127a25790565b602081519101fd5b63ffffffff60e01b16635b0e93fb60e11b811490811561298d575b811561297c575b811561296b575b811561295a575b8115612949575b8115612938575b8115612927575b8115612916575b8115612905575b81156128f4575b81156128e3575b81156128d2575b81156128c1575b81156128b0575b811561289f575b811561288e575b811561287d575b811561286c575b811561285b575b811561284d575090565b63335a353d60e11b14919050565b6327729e3b60e11b81149150612843565b630f95d04b60e41b8114915061283c565b6336cf06ff60e01b81149150612835565b6370c321eb60e01b8114915061282e565b631a10fa5160e31b81149150612827565b6344ab613f60e01b81149150612820565b637437e28f60e11b81149150612819565b631d06562b60e11b81149150612812565b63ceaf130960e01b8114915061280b565b63190be77560e21b81149150612804565b632344486160e21b811491506127fd565b6338997b1160e01b811491506127f6565b6394ed11e760e01b811491506127ef565b6301ffc9a760e01b811491506127e8565b6352d1902d60e01b811491506127e1565b63278f794360e11b811491506127da565b63c1a221f360e01b811491506127d3565b633e15cc3d60e21b811491506127cc565b631a7e6adf60e11b811491506127c5565b6003810154906129ad82611e21565b9160006129b8613561565b6000905b8382106129cc575b505050505090565b6129dc90859793959694966135ae565b95909660005b8851811015612a1f5780612a186129fb6001938c611e87565b5198612a068161269b565b99612a11828b611e87565b5288611e87565b50016129e2565b509650929391946001600160581b0319612a38826130c3565b1615612a4d57600190910190959394956129bc565b849596506129c4565b92909160ff60a09593168452600180861b03166020840152604083015260806060830152806080830152806000848401376000828201840152601f01601f1916010190565b919260809360ff6020969316845260018060a01b0316858401526040830152826060830152808383015280600060a084013760008282018401850152601f01601f191601010190565b909260809260ff61079d979516835260018060a01b03166020830152604082015281606082015201916122d9565b612b20600761154083611c0c565b906001600160581b0319612b33836130c3565b169081158015612e0d575b612dfc57612b4b90611c0c565b600b81015490600801612b5c613561565b612b64611de5565b506000905b838210612c4a575b50505050600160581b03612b825750565b8051909190612b9b9061031a906001600160a01b031681565b906020830191612bac835160ff1690565b90803b156101d95760405163bfd151c160e01b8152916000918391829084908290612be09036903490339060048601612a56565b03925af19081612c37575b50612c325750610485612c18612c10612c02611ca3565b94516001600160a01b031690565b925160ff1690565b92604051938493636d4fdb0960e01b855260048501612482565b915050565b806125a4612c4492610d9c565b38612beb565b612c5a90839794959692976135ae565b9290966000965b8851881015612dd257612c7a61126f61119b8a8c611e87565b8015908115612dc4575b8115612db6575b50612d835790879594939291612cb861031a61031a612caa8a8e611e87565b51516001600160a01b031690565b95612cd38b612cca60209c8d92611e87565b51015160ff1690565b98873b156101d95760409788519063031fb36160e21b8252818060049d8e369034903390850193612d0394612a56565b03815a6000948591f19081612d70575b50612d5957508a896104858a8a612d438f612cca612d2f611ca3565b94612d3d612caa828b611e87565b98611e87565b90516340b788e360e01b81529485948501612482565b600190980199509697509394509192909190612c61565b806125a4612d7d92610d9c565b38612d13565b610485612d956020612cca8b8d611e87565b6040516314d291c760e21b815260ff90911660048201529081906024820190565b600160591b14905038612c8b565b600160581b81149150612c84565b959497509290919550612de761126f826130c3565b15612df757909160010190612b69565b612b71565b610485612d95602085015160ff1690565b50600160591b8214612b3e565b90612e2482611319565b604090612e346040519182610e06565b8381528093612e45601f1991611319565b019160005b838110612e575750505050565b6020908251612e6581610dcf565b6060815282612e72611de5565b81830152828601015201612e4a565b60405190612e8e82610dcf565b6060602083600081520152565b9190916006810192600982015491612eb7600482015484612709565b92612ec3600094612e1a565b90612ecc613561565b906000915b818310612efd575b505050612ef7949550612eea612e81565b93845260208401526136a8565b91908252565b612f1090899895989796929394976135ae565b92909860005b8a51811015612f4b5780612f2c6001928d611e87565b516020612f42612f3b8c61269b565b9b8d611e87565b51015201612f16565b509850919693969592909495612f6361126f826130c3565b15612f745760019091019190612ed1565b612ed9565b9092916006820193600983015492612f95600482015485612709565b93612fa1600095612e1a565b90612faa613561565b906000915b818310612fd5575b505050612ef7959650612fc8612e81565b9485526020850152613829565b612fe8908a99969294979395989a6135ae565b93909860005b8a5181101561302d57808b9c602061301f61300e8d9e9f95600196611e87565b51926130198161269b565b9d611e87565b510152019a9998979a612fee565b509997949195985091959261304461126f826130c3565b156130555760019091019190612faf565b612fb7565b600091829182602083519301915af13d6040519160208284010160405281835260208301916000833e1561308c575090565b905190fd5b916000928392602083519301915af13d6040519160208284010160405281835260208301916000833e1561308c575090565b6bffffffffffffffffffffffff19815160601b1690602060ff60581b91015160581b161790565b604051906130f782610db4565b60006040838281528260208201520152565b916131126130ea565b5061311b610e27565b9060009081835260209061313682850165ffffffffffff9052565b6040938360408201529560056002820191015490613152613561565b9061315b611de5565b5085915b838310613173575b50505050505050505090565b61318690829b949a95969798999b6135ae565b99909488905b86518210156132cb576131a561126f61119b848a611e87565b80159081156132bd575b81156132af575b5061327d57906132068b93928a8f8a8c918f6131e985612cca8a6131e361031a61031a612caa848b611e87565b96611e87565b995180978195829463056ddae160e21b845260049d8e85016122fa565b03925af190811561044f57613221928d9261326557506132f7565b808c01519093906001600160a01b03168015159081613259575b5061324b5750600101909161318c565b8b516310b1cc1760e31b8152fd5b6001915014153861323b565b6104419192508c8d3d10610448576104398183610e06565b6104858b61328f8b612cca868c611e87565b905163520c50ef60e01b815260ff90911660048201529081906024820190565b600160591b149050386131b6565b600160581b811491506131af565b9a91949b999897969550506132e261126f826130c3565b156132f25760019092019161315f565b613167565b6133086133026130ea565b926139b2565b90613319815165ffffffffffff1690565b91602082019161333d613332845165ffffffffffff1690565b65ffffffffffff1690565b65ffffffffffff8095161161347457815165ffffffffffff1691602081019285613370613332865165ffffffffffff1690565b9116116134745760408201516001600160a01b03168061346157506040818101516001600160a01b0316908701525b6133bf6133b2835165ffffffffffff1690565b915165ffffffffffff1690565b90858216908616111561345157505165ffffffffffff1684525b6133ec6133b2835165ffffffffffff1690565b90838216908416101561343e57505165ffffffffffff1660208301525b815165ffffffffffff169061342a613332602085015165ffffffffffff1690565b9116116134345790565b6001604082015290565b65ffffffffffff16602084015250613409565b65ffffffffffff168552506133d9565b6001600160a01b0316604087015261339f565b60405163a45d8f5360e01b8152600490fd5b6040519060208083018160006301ffc9a760e01b95868452866024820152602481526134b181610db4565b51617530938685fa933d6000519086613556575b508561354c575b50846134e9575b505050816134df575090565b61079d9150613a04565b83945090600091839460405185810192835263ffffffff60e01b60248201526024815261351581610db4565b5192fa60005190913d83613541575b505081613537575b5015903880806134d3565b905015153861352c565b101591503880613524565b15159450386134cc565b8411159550386134c5565b613569611de5565b5060405161357681610dcf565b600081526000602082015290565b61358c611de5565b5060ff6040519161359c83610dcf565b8060601c835260581c16602082015290565b91906135c2906135bc611de5565b506130c3565b604051926135cf84610dea565b600a92600a855260005b610140811061369157506001600160581b031980841615613678575b6000935b8585108061366d575b1561365d5761365161364a8261361a61365794613584565b613624898c611e87565b5261362f888b611e87565b5086906001600160581b031916600052602052604060002090565b5460581b90565b9461269b565b936135f9565b925050925061079d918452613584565b508181161515613602565b9250600080528160205260406000205460581b926135f5565b60209061369c611de5565b828289010152016135d9565b9291926136b3613561565b916003820154926000905b8482106136d5575b50505050506020825192015190565b6136e290849795976135ae565b909660005b8851811015613804576136fd61119b828b611e87565b6001600160581b0319811680159081156137f6575b81156137e8575b506137d6576137566111bb61373888613732868f611e87565b51613b66565b9260058a01906001600160581b031916600052602052604060002090565b8051613767575b50506001016136e7565b95919893999490969260005b87518110156137c25780896137ae8c61378e6001958d611e87565b5160206137a2818401938451905190611e87565b510152518d5190611e87565b51526137ba8b5161269b565b8b5201613773565b50929650939892976001919550903861375d565b610485612d956020612cca858e611e87565b600160591b14905038613719565b600160581b81149150613712565b5094965061381461126f826130c3565b15613824576001909101906136be565b6136c6565b90939293613835613561565b926003830154936000905b858210613858575b5050505050506020825192015190565b61386590859896986135ae565b909760005b895181101561398d5761388061119b828c611e87565b6001600160581b03198116801590811561397f575b8115613971575b5061395f576138db6111bb6138bd888a8f876138b791611e87565b51613c20565b9260058b01906001600160581b031916600052602052604060002090565b80516138ec575b505060010161386a565b969260009b96929a959198949b5b885181101561394a57808a6139368d6139156001958e611e87565b516020908183019161392a8351855190611e87565b51015251905190611e87565b51526139428c5161269b565b8c52016138fa565b509296509398600191959a93975090386138e2565b610485612d956020612cca858f611e87565b600160591b1490503861389c565b600160581b81149150613895565b5095975061399d61126f826130c3565b156139ad57600190910190613840565b613848565b6139ba6130ea565b5065ffffffffffff90818160a01c169182156139fc575b604051926139de84610db4565b60d083901c84521660208301526001600160a01b0316604082015290565b9150816139d1565b6000602091604051838101906301ffc9a760e01b825263043140ed60e01b602482015260248152613a3481610db4565b5191617530fa6000513d82613a55575b5081613a4e575090565b9050151590565b60201115915038613a44565b90813b15613ae757600080516020613cef83398151915280546001600160a01b0319166001600160a01b0384169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2805115613acc57613ac991613c72565b50565b505034613ad557565b60405163b398979f60e01b8152600490fd5b604051634c9c8ce360e01b81526001600160a01b0383166004820152602490fd5b6020818303126101d9578051906001600160401b0382116101d9570181601f820112156101d9578051613b3a81610e34565b92613b486040519485610e06565b818452602082840101116101d95761079d9160208085019101610517565b8051909290613bb690600090613b84906001600160a01b031661031a565b936020860194613b95865160ff1690565b8360405180968195829463236b075960e11b84523490339060048601612a9b565b03925af160009181613bfb575b50613bf5575050610485613bdb612c10612c02611ca3565b92604051938493636d1fbba160e11b855260048501612482565b92509050565b613c199192503d806000833e613c118183610e06565b810190613b08565b9038613bc3565b805190939192613bb69160009190613c40906001600160a01b031661031a565b602087019583613c51885160ff1690565b60405163236b075960e11b8152968795869485933490339060048701612ae4565b60008061079d93602081519101845af4613c8a611ca3565b9190613cb25750805115613ca057805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580613ce5575b613cc3575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15613cbb56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220f074b9dc0cb1e3ef85fbc9030e77e6d94c6e17e44e78caa9eef7fcff852a147c64736f6c63430008180033",
}

// UpgradableMSCAFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use UpgradableMSCAFactoryMetaData.ABI instead.
var UpgradableMSCAFactoryABI = UpgradableMSCAFactoryMetaData.ABI

// UpgradableMSCAFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UpgradableMSCAFactoryMetaData.Bin instead.
var UpgradableMSCAFactoryBin = UpgradableMSCAFactoryMetaData.Bin

// DeployUpgradableMSCAFactory deploys a new Ethereum contract, binding an instance of UpgradableMSCAFactory to it.
func DeployUpgradableMSCAFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _owner common.Address, _entryPointAddr common.Address, _pluginManagerAddr common.Address) (common.Address, *types.Transaction, *UpgradableMSCAFactory, error) {
	parsed, err := UpgradableMSCAFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UpgradableMSCAFactoryBin), backend, _owner, _entryPointAddr, _pluginManagerAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UpgradableMSCAFactory{UpgradableMSCAFactoryCaller: UpgradableMSCAFactoryCaller{contract: contract}, UpgradableMSCAFactoryTransactor: UpgradableMSCAFactoryTransactor{contract: contract}, UpgradableMSCAFactoryFilterer: UpgradableMSCAFactoryFilterer{contract: contract}}, nil
}

// UpgradableMSCAFactory is an auto generated Go binding around an Ethereum contract.
type UpgradableMSCAFactory struct {
	UpgradableMSCAFactoryCaller     // Read-only binding to the contract
	UpgradableMSCAFactoryTransactor // Write-only binding to the contract
	UpgradableMSCAFactoryFilterer   // Log filterer for contract events
}

// UpgradableMSCAFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type UpgradableMSCAFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradableMSCAFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UpgradableMSCAFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradableMSCAFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UpgradableMSCAFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradableMSCAFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UpgradableMSCAFactorySession struct {
	Contract     *UpgradableMSCAFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// UpgradableMSCAFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UpgradableMSCAFactoryCallerSession struct {
	Contract *UpgradableMSCAFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// UpgradableMSCAFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UpgradableMSCAFactoryTransactorSession struct {
	Contract     *UpgradableMSCAFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// UpgradableMSCAFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type UpgradableMSCAFactoryRaw struct {
	Contract *UpgradableMSCAFactory // Generic contract binding to access the raw methods on
}

// UpgradableMSCAFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UpgradableMSCAFactoryCallerRaw struct {
	Contract *UpgradableMSCAFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// UpgradableMSCAFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UpgradableMSCAFactoryTransactorRaw struct {
	Contract *UpgradableMSCAFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUpgradableMSCAFactory creates a new instance of UpgradableMSCAFactory, bound to a specific deployed contract.
func NewUpgradableMSCAFactory(address common.Address, backend bind.ContractBackend) (*UpgradableMSCAFactory, error) {
	contract, err := bindUpgradableMSCAFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UpgradableMSCAFactory{UpgradableMSCAFactoryCaller: UpgradableMSCAFactoryCaller{contract: contract}, UpgradableMSCAFactoryTransactor: UpgradableMSCAFactoryTransactor{contract: contract}, UpgradableMSCAFactoryFilterer: UpgradableMSCAFactoryFilterer{contract: contract}}, nil
}

// NewUpgradableMSCAFactoryCaller creates a new read-only instance of UpgradableMSCAFactory, bound to a specific deployed contract.
func NewUpgradableMSCAFactoryCaller(address common.Address, caller bind.ContractCaller) (*UpgradableMSCAFactoryCaller, error) {
	contract, err := bindUpgradableMSCAFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradableMSCAFactoryCaller{contract: contract}, nil
}

// NewUpgradableMSCAFactoryTransactor creates a new write-only instance of UpgradableMSCAFactory, bound to a specific deployed contract.
func NewUpgradableMSCAFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*UpgradableMSCAFactoryTransactor, error) {
	contract, err := bindUpgradableMSCAFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradableMSCAFactoryTransactor{contract: contract}, nil
}

// NewUpgradableMSCAFactoryFilterer creates a new log filterer instance of UpgradableMSCAFactory, bound to a specific deployed contract.
func NewUpgradableMSCAFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*UpgradableMSCAFactoryFilterer, error) {
	contract, err := bindUpgradableMSCAFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UpgradableMSCAFactoryFilterer{contract: contract}, nil
}

// bindUpgradableMSCAFactory binds a generic wrapper to an already deployed contract.
func bindUpgradableMSCAFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := UpgradableMSCAFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UpgradableMSCAFactory.Contract.UpgradableMSCAFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.UpgradableMSCAFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.UpgradableMSCAFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UpgradableMSCAFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.contract.Transact(opts, method, params...)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryCaller) AccountImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UpgradableMSCAFactory.contract.Call(opts, &out, "accountImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_UpgradableMSCAFactory *UpgradableMSCAFactorySession) AccountImplementation() (common.Address, error) {
	return _UpgradableMSCAFactory.Contract.AccountImplementation(&_UpgradableMSCAFactory.CallOpts)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryCallerSession) AccountImplementation() (common.Address, error) {
	return _UpgradableMSCAFactory.Contract.AccountImplementation(&_UpgradableMSCAFactory.CallOpts)
}

// EntryPoint is a free data retrieval call binding the contract method 0xb0d691fe.
//
// Solidity: function entryPoint() view returns(address)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryCaller) EntryPoint(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UpgradableMSCAFactory.contract.Call(opts, &out, "entryPoint")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EntryPoint is a free data retrieval call binding the contract method 0xb0d691fe.
//
// Solidity: function entryPoint() view returns(address)
func (_UpgradableMSCAFactory *UpgradableMSCAFactorySession) EntryPoint() (common.Address, error) {
	return _UpgradableMSCAFactory.Contract.EntryPoint(&_UpgradableMSCAFactory.CallOpts)
}

// EntryPoint is a free data retrieval call binding the contract method 0xb0d691fe.
//
// Solidity: function entryPoint() view returns(address)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryCallerSession) EntryPoint() (common.Address, error) {
	return _UpgradableMSCAFactory.Contract.EntryPoint(&_UpgradableMSCAFactory.CallOpts)
}

// GetAddress is a free data retrieval call binding the contract method 0xacf85fc1.
//
// Solidity: function getAddress(bytes32 _sender, bytes32 _salt, bytes _initializingData) view returns(address addr, bytes32 mixedSalt)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryCaller) GetAddress(opts *bind.CallOpts, _sender [32]byte, _salt [32]byte, _initializingData []byte) (struct {
	Addr      common.Address
	MixedSalt [32]byte
}, error) {
	var out []interface{}
	err := _UpgradableMSCAFactory.contract.Call(opts, &out, "getAddress", _sender, _salt, _initializingData)

	outstruct := new(struct {
		Addr      common.Address
		MixedSalt [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Addr = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.MixedSalt = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// GetAddress is a free data retrieval call binding the contract method 0xacf85fc1.
//
// Solidity: function getAddress(bytes32 _sender, bytes32 _salt, bytes _initializingData) view returns(address addr, bytes32 mixedSalt)
func (_UpgradableMSCAFactory *UpgradableMSCAFactorySession) GetAddress(_sender [32]byte, _salt [32]byte, _initializingData []byte) (struct {
	Addr      common.Address
	MixedSalt [32]byte
}, error) {
	return _UpgradableMSCAFactory.Contract.GetAddress(&_UpgradableMSCAFactory.CallOpts, _sender, _salt, _initializingData)
}

// GetAddress is a free data retrieval call binding the contract method 0xacf85fc1.
//
// Solidity: function getAddress(bytes32 _sender, bytes32 _salt, bytes _initializingData) view returns(address addr, bytes32 mixedSalt)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryCallerSession) GetAddress(_sender [32]byte, _salt [32]byte, _initializingData []byte) (struct {
	Addr      common.Address
	MixedSalt [32]byte
}, error) {
	return _UpgradableMSCAFactory.Contract.GetAddress(&_UpgradableMSCAFactory.CallOpts, _sender, _salt, _initializingData)
}

// IsPluginAllowed is a free data retrieval call binding the contract method 0xa50833cd.
//
// Solidity: function isPluginAllowed(address ) view returns(bool)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryCaller) IsPluginAllowed(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _UpgradableMSCAFactory.contract.Call(opts, &out, "isPluginAllowed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPluginAllowed is a free data retrieval call binding the contract method 0xa50833cd.
//
// Solidity: function isPluginAllowed(address ) view returns(bool)
func (_UpgradableMSCAFactory *UpgradableMSCAFactorySession) IsPluginAllowed(arg0 common.Address) (bool, error) {
	return _UpgradableMSCAFactory.Contract.IsPluginAllowed(&_UpgradableMSCAFactory.CallOpts, arg0)
}

// IsPluginAllowed is a free data retrieval call binding the contract method 0xa50833cd.
//
// Solidity: function isPluginAllowed(address ) view returns(bool)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryCallerSession) IsPluginAllowed(arg0 common.Address) (bool, error) {
	return _UpgradableMSCAFactory.Contract.IsPluginAllowed(&_UpgradableMSCAFactory.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UpgradableMSCAFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UpgradableMSCAFactory *UpgradableMSCAFactorySession) Owner() (common.Address, error) {
	return _UpgradableMSCAFactory.Contract.Owner(&_UpgradableMSCAFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryCallerSession) Owner() (common.Address, error) {
	return _UpgradableMSCAFactory.Contract.Owner(&_UpgradableMSCAFactory.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryCaller) PendingOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UpgradableMSCAFactory.contract.Call(opts, &out, "pendingOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_UpgradableMSCAFactory *UpgradableMSCAFactorySession) PendingOwner() (common.Address, error) {
	return _UpgradableMSCAFactory.Contract.PendingOwner(&_UpgradableMSCAFactory.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryCallerSession) PendingOwner() (common.Address, error) {
	return _UpgradableMSCAFactory.Contract.PendingOwner(&_UpgradableMSCAFactory.CallOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactorySession) AcceptOwnership() (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.AcceptOwnership(&_UpgradableMSCAFactory.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.AcceptOwnership(&_UpgradableMSCAFactory.TransactOpts)
}

// AddStake is a paid mutator transaction binding the contract method 0x0396cb60.
//
// Solidity: function addStake(uint32 _unstakeDelaySec) payable returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactor) AddStake(opts *bind.TransactOpts, _unstakeDelaySec uint32) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.contract.Transact(opts, "addStake", _unstakeDelaySec)
}

// AddStake is a paid mutator transaction binding the contract method 0x0396cb60.
//
// Solidity: function addStake(uint32 _unstakeDelaySec) payable returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactorySession) AddStake(_unstakeDelaySec uint32) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.AddStake(&_UpgradableMSCAFactory.TransactOpts, _unstakeDelaySec)
}

// AddStake is a paid mutator transaction binding the contract method 0x0396cb60.
//
// Solidity: function addStake(uint32 _unstakeDelaySec) payable returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactorSession) AddStake(_unstakeDelaySec uint32) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.AddStake(&_UpgradableMSCAFactory.TransactOpts, _unstakeDelaySec)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x81d0dff1.
//
// Solidity: function createAccount(bytes32 _sender, bytes32 _salt, bytes _initializingData) returns(address account)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactor) CreateAccount(opts *bind.TransactOpts, _sender [32]byte, _salt [32]byte, _initializingData []byte) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.contract.Transact(opts, "createAccount", _sender, _salt, _initializingData)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x81d0dff1.
//
// Solidity: function createAccount(bytes32 _sender, bytes32 _salt, bytes _initializingData) returns(address account)
func (_UpgradableMSCAFactory *UpgradableMSCAFactorySession) CreateAccount(_sender [32]byte, _salt [32]byte, _initializingData []byte) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.CreateAccount(&_UpgradableMSCAFactory.TransactOpts, _sender, _salt, _initializingData)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x81d0dff1.
//
// Solidity: function createAccount(bytes32 _sender, bytes32 _salt, bytes _initializingData) returns(address account)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactorSession) CreateAccount(_sender [32]byte, _salt [32]byte, _initializingData []byte) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.CreateAccount(&_UpgradableMSCAFactory.TransactOpts, _sender, _salt, _initializingData)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactorySession) RenounceOwnership() (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.RenounceOwnership(&_UpgradableMSCAFactory.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.RenounceOwnership(&_UpgradableMSCAFactory.TransactOpts)
}

// SetPlugins is a paid mutator transaction binding the contract method 0xe034b090.
//
// Solidity: function setPlugins(address[] _plugins, bool[] _permissions) returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactor) SetPlugins(opts *bind.TransactOpts, _plugins []common.Address, _permissions []bool) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.contract.Transact(opts, "setPlugins", _plugins, _permissions)
}

// SetPlugins is a paid mutator transaction binding the contract method 0xe034b090.
//
// Solidity: function setPlugins(address[] _plugins, bool[] _permissions) returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactorySession) SetPlugins(_plugins []common.Address, _permissions []bool) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.SetPlugins(&_UpgradableMSCAFactory.TransactOpts, _plugins, _permissions)
}

// SetPlugins is a paid mutator transaction binding the contract method 0xe034b090.
//
// Solidity: function setPlugins(address[] _plugins, bool[] _permissions) returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactorSession) SetPlugins(_plugins []common.Address, _permissions []bool) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.SetPlugins(&_UpgradableMSCAFactory.TransactOpts, _plugins, _permissions)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.TransferOwnership(&_UpgradableMSCAFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.TransferOwnership(&_UpgradableMSCAFactory.TransactOpts, newOwner)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xbb9fe6bf.
//
// Solidity: function unlockStake() returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactor) UnlockStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.contract.Transact(opts, "unlockStake")
}

// UnlockStake is a paid mutator transaction binding the contract method 0xbb9fe6bf.
//
// Solidity: function unlockStake() returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactorySession) UnlockStake() (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.UnlockStake(&_UpgradableMSCAFactory.TransactOpts)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xbb9fe6bf.
//
// Solidity: function unlockStake() returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactorSession) UnlockStake() (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.UnlockStake(&_UpgradableMSCAFactory.TransactOpts)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xc23a5cea.
//
// Solidity: function withdrawStake(address _withdrawAddress) returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactor) WithdrawStake(opts *bind.TransactOpts, _withdrawAddress common.Address) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.contract.Transact(opts, "withdrawStake", _withdrawAddress)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xc23a5cea.
//
// Solidity: function withdrawStake(address _withdrawAddress) returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactorySession) WithdrawStake(_withdrawAddress common.Address) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.WithdrawStake(&_UpgradableMSCAFactory.TransactOpts, _withdrawAddress)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xc23a5cea.
//
// Solidity: function withdrawStake(address _withdrawAddress) returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactorSession) WithdrawStake(_withdrawAddress common.Address) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.WithdrawStake(&_UpgradableMSCAFactory.TransactOpts, _withdrawAddress)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradableMSCAFactory.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactorySession) Receive() (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.Receive(&_UpgradableMSCAFactory.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryTransactorSession) Receive() (*types.Transaction, error) {
	return _UpgradableMSCAFactory.Contract.Receive(&_UpgradableMSCAFactory.TransactOpts)
}

// UpgradableMSCAFactoryAccountCreatedIterator is returned from FilterAccountCreated and is used to iterate over the raw logs and unpacked data for AccountCreated events raised by the UpgradableMSCAFactory contract.
type UpgradableMSCAFactoryAccountCreatedIterator struct {
	Event *UpgradableMSCAFactoryAccountCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpgradableMSCAFactoryAccountCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpgradableMSCAFactoryAccountCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpgradableMSCAFactoryAccountCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpgradableMSCAFactoryAccountCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpgradableMSCAFactoryAccountCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpgradableMSCAFactoryAccountCreated represents a AccountCreated event raised by the UpgradableMSCAFactory contract.
type UpgradableMSCAFactoryAccountCreated struct {
	Proxy  common.Address
	Sender [32]byte
	Salt   [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterAccountCreated is a free log retrieval operation binding the contract event 0x934abbffb6906db60a85b076f1e41da9667dfa53c7724f4fe2333298d7b1db8c.
//
// Solidity: event AccountCreated(address indexed proxy, bytes32 sender, bytes32 salt)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryFilterer) FilterAccountCreated(opts *bind.FilterOpts, proxy []common.Address) (*UpgradableMSCAFactoryAccountCreatedIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}

	logs, sub, err := _UpgradableMSCAFactory.contract.FilterLogs(opts, "AccountCreated", proxyRule)
	if err != nil {
		return nil, err
	}
	return &UpgradableMSCAFactoryAccountCreatedIterator{contract: _UpgradableMSCAFactory.contract, event: "AccountCreated", logs: logs, sub: sub}, nil
}

// WatchAccountCreated is a free log subscription operation binding the contract event 0x934abbffb6906db60a85b076f1e41da9667dfa53c7724f4fe2333298d7b1db8c.
//
// Solidity: event AccountCreated(address indexed proxy, bytes32 sender, bytes32 salt)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryFilterer) WatchAccountCreated(opts *bind.WatchOpts, sink chan<- *UpgradableMSCAFactoryAccountCreated, proxy []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}

	logs, sub, err := _UpgradableMSCAFactory.contract.WatchLogs(opts, "AccountCreated", proxyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpgradableMSCAFactoryAccountCreated)
				if err := _UpgradableMSCAFactory.contract.UnpackLog(event, "AccountCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountCreated is a log parse operation binding the contract event 0x934abbffb6906db60a85b076f1e41da9667dfa53c7724f4fe2333298d7b1db8c.
//
// Solidity: event AccountCreated(address indexed proxy, bytes32 sender, bytes32 salt)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryFilterer) ParseAccountCreated(log types.Log) (*UpgradableMSCAFactoryAccountCreated, error) {
	event := new(UpgradableMSCAFactoryAccountCreated)
	if err := _UpgradableMSCAFactory.contract.UnpackLog(event, "AccountCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UpgradableMSCAFactoryFactoryDeployedIterator is returned from FilterFactoryDeployed and is used to iterate over the raw logs and unpacked data for FactoryDeployed events raised by the UpgradableMSCAFactory contract.
type UpgradableMSCAFactoryFactoryDeployedIterator struct {
	Event *UpgradableMSCAFactoryFactoryDeployed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpgradableMSCAFactoryFactoryDeployedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpgradableMSCAFactoryFactoryDeployed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpgradableMSCAFactoryFactoryDeployed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpgradableMSCAFactoryFactoryDeployedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpgradableMSCAFactoryFactoryDeployedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpgradableMSCAFactoryFactoryDeployed represents a FactoryDeployed event raised by the UpgradableMSCAFactory contract.
type UpgradableMSCAFactoryFactoryDeployed struct {
	Factory               common.Address
	AccountImplementation common.Address
	EntryPoint            common.Address
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterFactoryDeployed is a free log retrieval operation binding the contract event 0xcb6d2c666b098c711fa0f2ce20b6863cc2b92e5378301100a4b2731b50516d5f.
//
// Solidity: event FactoryDeployed(address indexed factory, address accountImplementation, address entryPoint)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryFilterer) FilterFactoryDeployed(opts *bind.FilterOpts, factory []common.Address) (*UpgradableMSCAFactoryFactoryDeployedIterator, error) {

	var factoryRule []interface{}
	for _, factoryItem := range factory {
		factoryRule = append(factoryRule, factoryItem)
	}

	logs, sub, err := _UpgradableMSCAFactory.contract.FilterLogs(opts, "FactoryDeployed", factoryRule)
	if err != nil {
		return nil, err
	}
	return &UpgradableMSCAFactoryFactoryDeployedIterator{contract: _UpgradableMSCAFactory.contract, event: "FactoryDeployed", logs: logs, sub: sub}, nil
}

// WatchFactoryDeployed is a free log subscription operation binding the contract event 0xcb6d2c666b098c711fa0f2ce20b6863cc2b92e5378301100a4b2731b50516d5f.
//
// Solidity: event FactoryDeployed(address indexed factory, address accountImplementation, address entryPoint)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryFilterer) WatchFactoryDeployed(opts *bind.WatchOpts, sink chan<- *UpgradableMSCAFactoryFactoryDeployed, factory []common.Address) (event.Subscription, error) {

	var factoryRule []interface{}
	for _, factoryItem := range factory {
		factoryRule = append(factoryRule, factoryItem)
	}

	logs, sub, err := _UpgradableMSCAFactory.contract.WatchLogs(opts, "FactoryDeployed", factoryRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpgradableMSCAFactoryFactoryDeployed)
				if err := _UpgradableMSCAFactory.contract.UnpackLog(event, "FactoryDeployed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFactoryDeployed is a log parse operation binding the contract event 0xcb6d2c666b098c711fa0f2ce20b6863cc2b92e5378301100a4b2731b50516d5f.
//
// Solidity: event FactoryDeployed(address indexed factory, address accountImplementation, address entryPoint)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryFilterer) ParseFactoryDeployed(log types.Log) (*UpgradableMSCAFactoryFactoryDeployed, error) {
	event := new(UpgradableMSCAFactoryFactoryDeployed)
	if err := _UpgradableMSCAFactory.contract.UnpackLog(event, "FactoryDeployed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UpgradableMSCAFactoryOwnershipTransferStartedIterator is returned from FilterOwnershipTransferStarted and is used to iterate over the raw logs and unpacked data for OwnershipTransferStarted events raised by the UpgradableMSCAFactory contract.
type UpgradableMSCAFactoryOwnershipTransferStartedIterator struct {
	Event *UpgradableMSCAFactoryOwnershipTransferStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpgradableMSCAFactoryOwnershipTransferStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpgradableMSCAFactoryOwnershipTransferStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpgradableMSCAFactoryOwnershipTransferStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpgradableMSCAFactoryOwnershipTransferStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpgradableMSCAFactoryOwnershipTransferStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpgradableMSCAFactoryOwnershipTransferStarted represents a OwnershipTransferStarted event raised by the UpgradableMSCAFactory contract.
type UpgradableMSCAFactoryOwnershipTransferStarted struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferStarted is a free log retrieval operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryFilterer) FilterOwnershipTransferStarted(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*UpgradableMSCAFactoryOwnershipTransferStartedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UpgradableMSCAFactory.contract.FilterLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &UpgradableMSCAFactoryOwnershipTransferStartedIterator{contract: _UpgradableMSCAFactory.contract, event: "OwnershipTransferStarted", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferStarted is a free log subscription operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryFilterer) WatchOwnershipTransferStarted(opts *bind.WatchOpts, sink chan<- *UpgradableMSCAFactoryOwnershipTransferStarted, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UpgradableMSCAFactory.contract.WatchLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpgradableMSCAFactoryOwnershipTransferStarted)
				if err := _UpgradableMSCAFactory.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferStarted is a log parse operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryFilterer) ParseOwnershipTransferStarted(log types.Log) (*UpgradableMSCAFactoryOwnershipTransferStarted, error) {
	event := new(UpgradableMSCAFactoryOwnershipTransferStarted)
	if err := _UpgradableMSCAFactory.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UpgradableMSCAFactoryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the UpgradableMSCAFactory contract.
type UpgradableMSCAFactoryOwnershipTransferredIterator struct {
	Event *UpgradableMSCAFactoryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpgradableMSCAFactoryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpgradableMSCAFactoryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpgradableMSCAFactoryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpgradableMSCAFactoryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpgradableMSCAFactoryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpgradableMSCAFactoryOwnershipTransferred represents a OwnershipTransferred event raised by the UpgradableMSCAFactory contract.
type UpgradableMSCAFactoryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*UpgradableMSCAFactoryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UpgradableMSCAFactory.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &UpgradableMSCAFactoryOwnershipTransferredIterator{contract: _UpgradableMSCAFactory.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *UpgradableMSCAFactoryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UpgradableMSCAFactory.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpgradableMSCAFactoryOwnershipTransferred)
				if err := _UpgradableMSCAFactory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UpgradableMSCAFactory *UpgradableMSCAFactoryFilterer) ParseOwnershipTransferred(log types.Log) (*UpgradableMSCAFactoryOwnershipTransferred, error) {
	event := new(UpgradableMSCAFactoryOwnershipTransferred)
	if err := _UpgradableMSCAFactory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
